#!/bin/sh
# aginies@suse.com
#
# Quick script to easily start workload on ALP OS
# https://build.opensuse.org/project/show/SUSE:ALP:Workloads

PODMAN=/usr/bin/podman
# Official repo
WORKLOADPATH=registry.opensuse.org/suse/alp/workloads/tumbleweed_containerfiles/suse/alp/workloads

# Improve console layout with some color
txtund=$(tput sgr 0 1) # Underline
txtbld=$(tput bold)             # Bold
bldred=${txtbld}$(tput setaf 1) # red
bldgreen=${txtbld}$(tput setaf 2) # green
txtrst=$(tput sgr0)             # Reset
info_warn() {
    WARN=${bldred}$1${txtrst}
    echo -e ${WARN}
}
info_cmd() {
    CMDTXT=${txtund}${bldgreen}$1${txtrst}
    echo -e ${CMDTXT}
}


### Some useful functions
# useful to wait for input
press_enter() {
    cat <<EOF

--------------------------------------------
 Press ENTER to continue or Crtl+c to Abort
--------------------------------------------
EOF
read
}

show_info() {
    # To display encapsuled text with #
    nbchar="${1//[*]}"
    count=-1
    echo
    while [ $count -le ${#nbchar} ]; do ((count++)); echo -n "#"; done
    echo; echo " $1"
    count=-1
    while [ $count -le ${#nbchar} ]; do ((count++)); echo -n "#"; done
    echo
}

# xauth is required for GUI app
xauth_needed() {
    TEST=`rpm -qa | grep xauth`
    if [ -z "$TEST" ]; then
	info_warn "WARNING! "
    	echo -e "
You need to install xauth and reboot:"
	info_cmd "transactional-update pkg install xauth"
	info_cmd "reboot"
    fi
}

# display info about xauth
warning_xauth() {
  	echo -e "
Its mandatory to connect with ssh to the ALP OS using the -X (forwarding option):"
	info_cmd "ssh -X root@ALPOSIP"
	echo "If not you will have a message similar to:"
	info_warn "${DISPLAY} is not defined for graphical frontend"
}

# grab exact IP address
get_ip() {
    # grab all interfaces
    FRND=`openssl rand -hex 5`
    nmcli -g all | grep "^[a-z]" | grep connected | cut -d ":" -f 1 > /tmp/get_ip${FRND}
    # grab IP
    cat /tmp/get_ip${FRND} | while read line; 
       do 
       #echo $line
       ip -4 addr show "$line" | grep -oP "(?<=inet ).*(?=/)"
       echo -n $IP
    done
    rm -f /tmp/get_ip${FRND}
}

check_running() {
    # first ARG is the container name to check
    CONTAINER=$1
    TEST=`podman ps --format "{{.Names}}" | grep ${CONTAINER}`
    if [ -z "$TEST" ]; then
	echo -e "
 ${CONTAINER} Must be started"
	info_cmd "podman start ${CONTAINER}"
	echo "
OR
"

	info_cmd "$0 ${CONTAINER}"
	exit 1
	fi
}

check_container() {
	if [ -z "$1" ]; then info_warn "Need a container name to check!"; exit 1; fi
	# first ARG is the container name to check
	CONTAINER=$1
	# Check container has been created
	TEST=`podman ps --all --format "{{.Names}}" | grep ${CONTAINER}`
	if [ -z "$TEST" ]; then
	    echo ""
	else
	    # check container is already started
	    TEST2=`podman ps --format "{{.Names}}" | grep ${CONTAINER}`
            if [ ! -z "$TEST2" ]; then IFSTARTED=" and started"; else IFSTARTED=""; fi 
	    show_info "${CONTAINER} already created$IFSTARTED!"
	    if [ -z "$TEST2" ]; then
		echo -e "
- To start the container:"
		info_cmd "podman start ${CONTAINER}"
	    fi
	    echo -e "
- To remove the container:"
	    if [ ! -z "$TEST2" ]; then
		info_cmd "podman stop ${CONTAINER}"
	    fi
	    info_cmd "podman rm ${CONTAINER}"
            exit 1
	fi
}

### WORKLOADS

kvm_workload() {
    NAME=$1
    show_info "KVM container workload"
    # be sure that it fails in case of error (ie: detection of the kernel-default)
    set -eu
    IMAGE=${WORKLOADPATH}/${NAME}
    press_enter
    ${PODMAN} container runlabel install ${IMAGE}
    kvm-container-manage.sh info
    kvm-container-manage.sh create
    kvm-container-manage.sh start
    echo
    echo "- Starting a demo installation of a VM"
    press_enter
    virt-install-demo.sh
}


yast_ncurses_workload() {
    NAME=$1
    show_info "Yast ncurses"
    press_enter
    IMAGE=${WORKLOADPATH}/${NAME}
    ${PODMAN} container runlabel run ${IMAGE}
}

yast_qt_workload() {
    NAME=$1
    show_info "Yast QT"
    xauth_needed
    warning_xauth
    press_enter
    IMAGE=${WORKLOADPATH}/${NAME}
    ${PODMAN} container runlabel run ${IMAGE}
}

virtm_workload() {
    show_info "Virt-manager"
    xauth_needed
    warning_xauth
    press_enter
    virt-manager.sh
}

TOINSTALL=""
check_package() {
	NAME=$1
	for pkg in $NAME; 
	do
		TEST=`rpm -qa $pkg`
		echo $TEST
		if [ -z "$TEST" ]; then
			TOINSTALL="$TOINSTALL $pkg"
		else
			echo "$pkg already installed"
		fi
	done
}

pkg_install() {
	transactional-update pkg in ${TOINSTALL}
    	echo "- You need to reboot your system !"
	press_enter
	reboot
}

gdm_workload() {
    show_info "GDM"
    press_enter
    TESTSE=`getenforce`
    if [ "$TESTSE" != "Permissive"  ]; then
	    echo "- Switching system to Permissive mode and reboot"
	    echo "/etc/selinux/config:"
	    echo "SELINUX=permissive"
	    echo "(A backup file will be created)"
	    press_enter
	    cp -vf /etc/sysconfig/selinux-policy /etc/sysconfig/selinux-policy.bck
	    cat /etc/sysconfig/selinux-policy.bck | sed -e "s/SELINUX=.*/SELINUX=permissive/" > /etc/sysconfig/selinux-policy
	    echo "- Reboot the system?"
	    press_enter
	    reboot
    fi
    check_package accountsservice
    check_package systemd-experimental

    if [ ! -z "$TOINSTALL" ]; then
	    echo "- You need to install ${TOINSTALL}"
	    press_enter
	    pkg_install
	    exit 1
    fi
    NAME=$1
    IMAGE=${WORKLOADPATH}/${NAME}
    ${PODMAN} container runlabel install ${IMAGE}
    systemctl daemon-reload
    systemctl reload dbus
    systemctl restart accounts-daemon
    ${PODMAN} container runlabel run ${IMAGE}
}

cockpit_workload() {
    NAME=$1
    show_info "Cockpit Web Management workload"
    press_enter
    IMAGE=${WORKLOADPATH}/${NAME}
    #IMAGE=localhost/co:latest
    ${PODMAN} container runlabel install ${IMAGE}
    ${PODMAN} container runlabel --name cockpit-ws run ${IMAGE}
    DATA=$(get_ip)
    echo
    for list in $DATA; do
	echo "	Go to https://$list:9090"
    done
}

firewalld_workload() {
    NAME=$1
    show_info "Firewalld workload"
    press_enter
    IMAGE=${WORKLOADPATH}/${NAME}
    ${PODMAN} create --name firewalld --privileged --init --cgroupns host --network host ${IMAGE}
    ${PODMAN} start firewalld
}

grafana_workload() {
    NAME=$1
    show_info "Grafana Web interface workload"
    press_enter
    IMAGE=${WORKLOADPATH}/${NAME}
    ${PODMAN} container runlabel install ${IMAGE}
    grafana-container-manage.sh create
    grafana-container-manage.sh start
    echo 
    DATA=$(get_ip)
    for list in $DATA; do
	echo "	Go to https://$list:3000"
    done

cat <<EOF
	login with admin / admin

EOF
}

usage() {
    cat <<EOF

	This is a DEMO script to TEST some ALP OS workloads
	https://documentation.suse.com/alp/all/

   	First arg should be the workload to start
        $0 [kvm|yast|cockpit|grafana|firewalld|virtm|gdm|help]

kvm	
	Prepare system to deploy Virtual Machine
	(Kvm container workload libvirtd)
		
virtm
	Manage Virtual Machine (virt-manager)

gdm
	GDM workload

yast
	Manage you host OS (console)

yastqt
	Manage your host OS (GUI)

cockpit
	Manage you host OS (Cockpit Web Management cockpit-ws)
	https://HOSTNAME_OR_IP_OF_ALP_HOST:9090

grafana
	Monitoring System (Grafana Web Interface grafana)
	Go to https://HOSTNAME_OR_IP_OF_ALP_HOST:3000

firewalld
	Firewall Management (firewalld WIP)
	(may set restrictibe rules...)

EOF
	exit 0
}


if [ $# -eq 1 ]; then
    case $1 in
	kvm)
	    check_container libvirtd
	    kvm_workload kvm:latest
	    ;;
	virtm)
	    check_running libvirtd
	    virtm_workload 
	    ;;
	gdm)
	    check_container gdm
	    gdm_workload gdm:latest
	    ;;
	yast)
	    yast_ncurses_workload yast-mgmt-ncurses:latest
	    ;;
	yastqt)
	    yast_qt_workload yast-mgmt-qt:latest
	    ;;

	cockpit)
	    check_container cockpit-ws
	    cockpit_workload cockpit-ws:latest
	    ;;
	grafana)
	    check_container grafana
	    grafana_workload grafana:latest
	    ;;
	firewalld)
	    check_container firewalld
	    firewalld_workload firewalld:latest
	    ;;
	help)
	    usage
	    ;;
	ip)
	get_ip
	    ;;
	*)
	    usage
	    ;;
    esac
else
    usage
fi
