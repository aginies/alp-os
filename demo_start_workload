#!/bin/sh
# aginies@suse.com
#
# Quick script to easily start workload on ALP OS
# https://build.opensuse.org/project/show/SUSE:ALP:Workloads

PODMAN=/usr/bin/podman
WORKLOADPATH=registry.opensuse.org/suse/alp/workloads/tumbleweed_containerfiles/suse/alp/workloads

press_enter() {
    cat <<EOF

--------------------------------------------
 Press ENTER to continue or Crtl+c to Abort
--------------------------------------------
EOF
read
}

show_info() {
    # To display encapsuled text with #
    nbchar="${1//[*]}"
    count=-1
    echo
    while [ $count -le ${#nbchar} ]; do ((count++)); echo -n "#"; done
    echo; echo " $1"
    count=-1
    while [ $count -le ${#nbchar} ]; do ((count++)); echo -n "#"; done
    echo
}

xauth_needed() {
    TEST=`rpm -qa | grep xauth`
    if [ -z "$TEST" ]; then
    	cat <<EOF
You need to install xauth and reboot:
transactional-update pkg install xauth
reboot
EOF
    fi
}

warning_xauth() {
    cat <<EOF
Its important to connect with ssh to the ALP OS using the -X (forwarding option):
ssh -X root@ALPOSIP

If not you will have a message similar to:
$DISPLAY is not defined for graphical frontend
EOF
}

kvm_workload() {
    NAME=$1
    show_info "KVM container workload"
    # be sure that it fails in case of error (ie: detection of the kernel-default)
    set -eu
    IMAGE=${WORKLOADPATH}/${NAME}
    press_enter
    ${PODMAN} container runlabel install ${IMAGE}
    kvm-container-manage.sh info
    kvm-container-manage.sh create
    kvm-container-manage.sh start
    echo "- Starting a demo installation of a VM"
    virt-install-demo.sh
}


yast_ncurses_workload() {
    NAME=$1
    show_info "Yast ncurses"
    press_enter
    IMAGE=${WORKLOADPATH}/${NAME}
    ${PODMAN} container runlabel run ${IMAGE}
}

yast_qt_workload() {
    NAME=$1
    show_info "Yast QT"
    xauth_neded
    warning_xauth
    press_enter
    IMAGE=${WORKLOADPATH}/${NAME}
    ${PODMAN} container runlabel run ${IMAGE}
}

virtm_workload() {
    show_info "Virt-manager QT"
    xauth_neded
    warning_xauth
    press_enter
    virt-manager.sh
}



cockpit_workload() {
    NAME=$1
    show_info "Cockpit Web Management workload"
    press_enter
    IMAGE=${WORKLOADPATH}/${NAME}
    ${PODMAN} container runlabel install ${IMAGE}
    ${PODMAN} container runlabel --name cockpit-ws run ${IMAGE}
    cat <<EOF

	Go to https://HOSTNAME_OR_IP_OF_ALP_HOST:9090

EOF
}

firewalld_workload() {
    NAME=$1
    show_info "Firewalld workload"
    press_enter
    IMAGE=${WORKLOADPATH}/${NAME}
    ${PODMAN} create --name firewalld --privileged --init --cgroupns host --network host ${IMAGE}
    ${PODMAN} start firewalld
}


grafana_workload() {
    NAME=$1
    show_info "Grafana Web interface workload"
    press_enter
    IMAGE=${WORKLOADPATH}/${NAME}
    ${PODMAN} container runlabel install ${IMAGE}
    grafana-container-manage.sh create
    grafana-container-manage.sh start
    cat <<EOF

	Go to https://HOSTNAME_OR_IP_OF_ALP_HOST:3000
	login with admin / admin

EOF
}

check_running() {
	# first ARG is the container name to check
        CONTAINER=$1
	TEST=`podman ps --format "{{.Names}}" | grep ${CONTAINER}`
	cat <<EOF
 ${CONTAINER} Must be started"

podman start ${CONTAINER}
EOF
}

check_container() {
	if [ -z "$1" ]; then echo "Need a container name to check!"; exit 1; fi
	# first ARG is the container name to check
	CONTAINER=$1
	# Check container has been created
	TEST=`podman ps --all --format "{{.Names}}" | grep ${CONTAINER}`
	if [ -z "$TEST" ]; then
	    echo ""
	else
	    # check container is already started
	    TEST2=`podman ps --format "{{.Names}}" | grep ${CONTAINER}`
            if [ ! -z "$TEST2" ]; then IFSTARTED=" and started"; else IFSTARTED=""; fi 
	show_info "${CONTAINER} already created$IFSTARTED!"
	if [ -z "$TEST2" ]; then
	cat <<EOF
- To start the container:
podman start ${CONTAINER}

EOF
	fi
	cat <<EOF
- To remove the container:
EOF
	if [ ! -z "$TEST2" ]; then
	cat <<EOF
podman stop ${CONTAINER}
EOF
	fi
	cat <<EOF
podman rm ${CONTAINER}
EOF
        exit 1
	fi
}

usage() {
    cat <<EOF

	This is a DEMO script to TEST some ALP OS workload
	https://documentation.suse.com/alp/all/

   	First arg should be the workload to start
        $0 [kvm|yast|cockpit|grafana|firewalld|virtm|help]

kvm	
	KVM container workload (libvirtd)
		
virtm
	launch virt-manager

yast
	Launch Yast ncurses (console)

yastqt
	Launch Yast qt (graphics)

cockpit
	Cockpit Web Management (cockpit-ws)
	https://HOSTNAME_OR_IP_OF_ALP_HOST:9090

grafana
	Grafana Web Interface (grafana)
	Go to https://HOSTNAME_OR_IP_OF_ALP_HOST:3000

firewalld
	firewalld container

EOF
	exit 0
}


if [ $# -eq 1 ]; then
    case $1 in
	kvm)
	    check_container libvirtd
	    kvm_workload kvm:latest
	    ;;
	virtm)
	    check_running libvirtd
	    virtm_workload 
	    ;;
	yast)
	    yast_ncurses_workload yast-mgmt-ncurses:latest
	    ;;
	yastqt)
	    yast_qt_workload yast-mgmt-qt:latest
	    ;;

	cockpit)
	    check_container cockpit-ws
	    cockpit_workload cockpit-ws:latest
	    ;;
	grafana)
	    check_container grafana
	    grafana_workload grafana:latest
	    ;;
	firewalld)
	    check_container firewalld
	    firewalld_workload firewalld:latest
	    ;;
	help)
	    usage
	    ;;
	*)
	    usage
	    ;;
    esac
else
    usage
fi
