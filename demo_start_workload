#!/bin/sh
# aginies@suse.com
#
# Quick script to easily start workload on ALP OS
# currently available one are at:
# https://build.opensuse.org/project/show/SUSE:ALP:Workloads

PODMAN=/usr/bin/podman
WORKLOADPATH=registry.opensuse.org/suse/alp/workloads/tumbleweed_containerfiles/suse/alp/workloads

# Waiting ENTER key press from the user
press_enter() {
    cat <<EOF

--------------------------------------------
 Press ENTER to continue or Crtl+c to Abort
--------------------------------------------
EOF
read
}

# To display encapsuled info text with #
show_info() {
	nbchar="${1//[*]}"
	count=-1
	echo
	while [ $count -le ${#nbchar} ]; do ((count++)); echo -n "#"; done
	echo; echo " $1"
	count=-1
	while [ $count -le ${#nbchar} ]; do ((count++)); echo -n "#"; done
	echo
}

kvm_workload() {
    NAME=$1
    show_info "KVM container workload"
    # be sure that it fails in case of error (ie: detection of the kernel-default)
    set -eu
    IMAGE=${WORKLOADPATH}/${NAME}
    press_enter
    ${PODMAN} container runlabel install ${IMAGE}
    kvm-container-manage.sh info
    kvm-container-manage.sh create
    kvm-container-manage.sh start
    echo "- Starting the installation of a VM"
    virt-install.sh
}


yast_ncurses_workload() {
    NAME=$1
    show_info "Yast ncurses"
    press_enter
    IMAGE=${WORKLOADPATH}/${NAME}
    ${PODMAN} container runlabel run ${IMAGE}
}


cockpit_workload() {
    NAME=$1
    show_info "Cockpit Web Management workload"
    press_enter
    IMAGE=${WORKLOADPATH}/${NAME}
    ${PODMAN} container runlabel install ${IMAGE}
    ${PODMAN} container runlabel --name cockpit-ws run ${IMAGE}
    cat <<EOF

	Go to https://HOSTNAME_OR_IP_OF_ALP_HOST:9090

EOF
}

grafana_workload() {
    NAME=$1
    show_info "Grafana Web interface workload"
    press_enter
    IMAGE=${WORKLOADPATH}/${NAME}
    ${PODMAN} container runlabel install ${IMAGE}
    grafana-container-manage.sh create
    grafana-container-manage.sh start
    cat <<EOF

	Go to https://HOSTNAME_OR_IP_OF_ALP_HOST:3000
	login with admin / admin

EOF
}

# check if a container exist
# if it exist check that it is started or not
# display some help command to stop and remove the already existing container
check_container() {
	if [ -z "$1" ]; then echo "Need a container name to check!"; exit 1; fi
	# first ARG is the container name to check
	CONTAINER=$1
	# Check container has been created
	TEST=`podman ps --all --format "{{.Names}}" | grep ${CONTAINER}`
	if [ -z "$TEST" ]; then
	    echo ""
	else
	    # check container is already started
	    TEST2=`podman ps --format "{{.Names}}" | grep ${CONTAINER}`
            if [ ! -z "$TEST2" ]; then IFSTARTED=" and started"; else IFSTARTED=""; fi 
	show_info "${CONTAINER} container already created$IFSTARTED!"
	if [ -z "$TEST2" ]; then
	cat <<EOF
- To start the container:
podman start ${CONTAINER}

EOF
	fi
	cat <<EOF
- To remove the container:
EOF
	if [ ! -z "$TEST2" ]; then
	cat <<EOF
podman stop ${CONTAINER}
EOF
	fi
	cat <<EOF
podman rm ${CONTAINER}
EOF
        exit 1
	fi
}

# classical help
usage() {
    cat <<EOF

	This is a DEMO script to TEST some ALP OS workload

	First arg should be the workload to start:
        $0 [kvm|yast|cockpit|grafana|help]

kvm	
	KVM container workload (libvirtd)
		
yast
	Yast ncurses

cockpit
	Cockpit Web Management (cockpit-ws)
	https://HOSTNAME_OR_IP_OF_ALP_HOST:9090

grafana
	Grafana Web Interface (grafana)
	Go to https://HOSTNAME_OR_IP_OF_ALP_HOST:3000

EOF
	exit 0
}

# Catching what to do
if [ $# -eq 1 ]; then
    case $1 in
	kvm)
	    check_container libvirtd
	    kvm_workload kvm:latest
	    ;;
	yast)
	    yast_ncurses_workload yast-mgmt-ncurses:latest
	    ;;
	cockpit)
	    check_container cockpit-ws
	    cockpit_workload cockpit-ws:latest
	    ;;
	grafana)
	    check_container grafana
	    grafana_workload grafana:latest
	    ;;
	help)
	    usage
	    ;;
    esac
else
    usage
fi
